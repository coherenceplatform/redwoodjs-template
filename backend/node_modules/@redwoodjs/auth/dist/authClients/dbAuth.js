"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.dbAuth = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

const dbAuth = function (_client) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    fetchConfig: {
      credentials: 'same-origin'
    }
  };
  const {
    credentials
  } = config.fetchConfig;

  const forgotPassword = async username => {
    const response = await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: (0, _stringify.default)({
        username,
        method: 'forgotPassword'
      })
    });
    return await response.json();
  };

  const getToken = async () => {
    const response = await fetch("".concat(global.RWJS_API_DBAUTH_URL, "?method=getToken"), {
      credentials
    });
    const token = await response.text();

    if (token.length === 0) {
      return null;
    } else {
      return token;
    }
  };

  const login = async attributes => {
    const {
      username,
      password
    } = attributes;
    const response = await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: (0, _stringify.default)({
        username,
        password,
        method: 'login'
      })
    });
    return await response.json();
  };

  const logout = async () => {
    await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      body: (0, _stringify.default)({
        method: 'logout'
      })
    });
    return true;
  };

  const resetPassword = async attributes => {
    const response = await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: (0, _stringify.default)({ ...attributes,
        method: 'resetPassword'
      })
    });
    return await response.json();
  };

  const signup = async attributes => {
    const response = await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: (0, _stringify.default)({ ...attributes,
        method: 'signup'
      })
    });
    return await response.json();
  };

  const validateResetToken = async resetToken => {
    const response = await fetch(global.RWJS_API_DBAUTH_URL, {
      credentials,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: (0, _stringify.default)({
        resetToken,
        method: 'validateResetToken'
      })
    });
    return await response.json();
  };

  return {
    type: 'dbAuth',
    client: () => null,
    login,
    logout,
    signup,
    getToken,
    getUserMetadata: getToken,
    forgotPassword,
    resetPassword,
    validateResetToken
  };
};

exports.dbAuth = dbAuth;