"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _path = _interopRequireDefault(require("path"));

var _nft = require("@vercel/nft");

var _archiver = _interopRequireDefault(require("archiver"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

const ZIPBALL_DIR = './api/dist/zipball';

function zipDirectory(source, out) {
  const archive = (0, _archiver.default)('zip', {
    zlib: {
      level: 5
    }
  });

  const stream = _fsExtra.default.createWriteStream(out);

  return new _promise.default((resolve, reject) => {
    archive.directory(source, false).on('error', err => reject(err)).pipe(stream);
    stream.on('close', () => resolve());
    archive.finalize();
  });
}

async function packageSingleFunction(functionFile) {
  const {
    name: functionName
  } = _path.default.parse(functionFile);

  const {
    fileList: functionDependencyFileList
  } = await (0, _nft.nodeFileTrace)([functionFile]);
  const copyPromises = [];

  for (const singleDependencyPath of functionDependencyFileList) {
    copyPromises.push(_fsExtra.default.copy('./' + singleDependencyPath, `${ZIPBALL_DIR}/${functionName}/${singleDependencyPath}`));
  }

  const functionEntryPromise = _fsExtra.default.outputFile(`${ZIPBALL_DIR}/${functionName}/${functionName}.js`, `module.exports = require('${functionFile}')`);

  copyPromises.push(functionEntryPromise);
  await _promise.default.all(copyPromises);
  await zipDirectory(`${ZIPBALL_DIR}/${functionName}`, `${ZIPBALL_DIR}/${functionName}.zip`);
  await _fsExtra.default.remove(`${ZIPBALL_DIR}/${functionName}`);
  return;
}

async function ntfPack() {
  var _context, _context2;

  const filesToBePacked = (0, _map.default)(_context = (0, _filter.default)(_context2 = await _fsExtra.default.readdir('./api/dist/functions')).call(_context2, path => (0, _endsWith.default)(path).call(path, '.js'))).call(_context, path => `./api/dist/functions/${path}`);
  return _promise.default.all((0, _map.default)(filesToBePacked).call(filesToBePacked, packageSingleFunction));
}

var _default = ntfPack;
exports.default = _default;